// Code generated by ObjectBox; DO NOT EDIT.

#include "card_store.obx.hpp"

const obx::Property<CardStore, OBXPropertyType_Long> CardStore_::id(1);
const obx::Property<CardStore, OBXPropertyType_String> CardStore_::word(2);
const obx::Property<CardStore, OBXPropertyType_StringVector> CardStore_::meanings(3);
const obx::Property<CardStore, OBXPropertyType_Long> CardStore_::time(4);
const obx::Property<CardStore, OBXPropertyType_Long> CardStore_::success(5);

void CardStore::_OBX_MetaInfo::toFlatBuffer(flatbuffers::FlatBufferBuilder& fbb, const CardStore& object) {
    fbb.Clear();
    auto offsetword = fbb.CreateString(object.word);
    auto offsetmeanings = fbb.CreateVectorOfStrings(object.meanings);
    flatbuffers::uoffset_t fbStart = fbb.StartTable();
    fbb.TrackField(4, fbb.PushElement<obx_id>(object.id));
    fbb.AddOffset(6, offsetword);
    fbb.AddOffset(8, offsetmeanings);
    fbb.TrackField(10, fbb.PushElement<uint64_t>(object.time));
    fbb.TrackField(12, fbb.PushElement<uint64_t>(object.success));
    flatbuffers::Offset<flatbuffers::Table> offset;
    offset.o = fbb.EndTable(fbStart);
    fbb.Finish(offset);
}

CardStore CardStore::_OBX_MetaInfo::fromFlatBuffer(const void* data, size_t size) {
    CardStore object;
    fromFlatBuffer(data, size, object);
    return object;
}

std::unique_ptr<CardStore> CardStore::_OBX_MetaInfo::newFromFlatBuffer(const void* data, size_t size) {
    auto object = std::unique_ptr<CardStore>(new CardStore());
    fromFlatBuffer(data, size, *object);
    return object;
}

void CardStore::_OBX_MetaInfo::fromFlatBuffer(const void* data, size_t, CardStore& outObject) {
    const auto* table = flatbuffers::GetRoot<flatbuffers::Table>(data);
    assert(table);
    outObject.id = table->GetField<obx_id>(4, 0);
    {
        auto* ptr = table->GetPointer<const flatbuffers::String*>(6);
        if (ptr) outObject.word.assign(ptr->c_str());
    }
    {
        auto* ptr = table->GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>*>(8);
        if (ptr) {
            outObject.meanings.reserve(ptr->size());
            for (flatbuffers::uoffset_t i = 0; i < ptr->size(); i++) {
                auto* itemPtr = ptr->Get(i);
                if (itemPtr) outObject.meanings.emplace_back(itemPtr->c_str());
            }
        }
    }
    outObject.time = table->GetField<uint64_t>(10, 0);
    outObject.success = table->GetField<uint64_t>(12, 0);
    
}

